require 'rubygems'

require 'bundler'
Bundler.setup

require 'rake'
require 'couchrest'
require 'rack/mime'
require 'active_support/json'
require 'active_support/core_ext/hash'
require 'yajl/http_stream'

require 'pp'

# Store connection to CouchDB in this constant
#
Database = CouchRest.database!('http://127.0.0.1:4000/gutenberg')

desc "Upload application TODO:assets & views"
task :default => [:views, :assets] do
  puts "-"*80
  puts "Uploaded application logic and assets into database, please check:",
       " * http://localhost:4000/_utils/database.html?gutenberg",
       " * http://localhost:4000/gutenberg/_design/wc/_view/word_count",
       " * http://localhost:4000/gutenberg/_design/wc/_view/word_count?group=true",
       " * http://localhost:4000/gutenberg/_design/wc/_view/word_count?group=true&key=[\"answers\",\"memoirs of sherlock holmes\"]",
  " * TODO: http://localhost:4000/gutenberg/_design/person/_list/all/all"
  puts "Relevant code is in the _design/wc folder", ""
end

desc "Upload database logic from _design/wc"
task :views do
  require 'couch_docs'

  dir = CouchDocs::DesignDirectory.new('_design/wc')
  doc = dir.to_hash
  # pp doc
  doc.update '_id' => '_design/wc', 'language' => 'javascript'
  rev = Database.get('_design/wc')['_rev'] rescue nil
  doc.update( {'_rev' => rev} ) if rev
  p doc['views'].keys
  response = Database.save_doc(doc)
  p response
end

desc "Upload assets from _design/assets"
task :assets do
  assets_folder = Pathname.new('_design/assets')

  doc = {
    '_id'   => '_design/assets',
    '_attachments' => {},
  }

  # puts "* Reading assets in '#{assets_folder}':"
  # FileList.new("#{assets_folder}/**/*.*").each do |source|
  #   attachment = source.gsub(Regexp.new("^#{assets_folder}/(.*)$"), '\1')
  #   puts "  - #{attachment}"
  #   doc['_attachments'][attachment] = {
  #     'content_type' => Rack::Mime.mime_type( File.extname(assets_folder.join(attachment)) ),
  #     'data' => File.read(assets_folder.join(attachment))
  #   }
  # end

  # rev = Database.get('_design/assets')['_rev'] rescue nil
  # doc.update( {'_rev' => rev} ) if rev

  # p doc['_attachments'].keys
  # Database.save_doc(doc)
end
